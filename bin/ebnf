#!/usr/bin/env php
<?php
/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Vincent Tscherter <tscherter@karmin.ch>
 * @author Sven Strittmatter <ich@weltraumschaf.de>
 */

namespace de\weltraumschaf\ebnf;

use \Exception   as Exception;

require_once dirname(__DIR__) . "/src/Scanner.php";
require_once dirname(__DIR__) . "/src/Parser.php";
require_once dirname(__DIR__) . "/src/Renderer.php";

define("EBNF_OK", 0);
define("EBNF_READ_ERROR", 1);
define("EBNF_NO_SYNTAX", 2);
define("EBNF_SYNTAX_ERROR", 3);
define("EBNF_FATAL_ERROR", 4);

// input example
$input = <<<EOD
"EBNF defined in itself" {
  syntax     = [ title ] "{" { rule } "}" [ comment ].
  rule       = identifier "=" expression ( "." | ";" ) .
  expression = term { "|" term } .
  term       = factor { factor } .
  factor     = identifier
             | literal
             | "[" expression "]"
             | "(" expression ")"
             | "{" expression "}" .
  identifier = character { character } .
  title      = literal .
  comment    = literal .
  literal    = "'" character { character } "'"
             | '"' character { character } '"' .
}
EOD;

$usage = <<<EOD
Usage: ebnf -s <file> [-o <file>] [-f png|jpg|gif|xml] [-h]

  -s <file>  File with EBNF grammar.
  -o <file>  Output file. If omitted the input file name is used and the file extensions
             will be substituded with the format.
  -f format  Format for generated image (png, jpg, gif, xml). Default is png.
  -d         Enables debug output.
  -h         This help.

Example grammar:
{$input}\n\n
EOD;

$format  = Renderer::FORMAT_PNG;
$outfile = "";
$opts    = getopt("s:f:o:hd");
$debug = false;

if (isset($opts["h"])) {
    echo $usage;
    exit(EBNF_OK);
}

if (isset($opts["d"])) {
    $debug = true;
}

if (isset($opts["s"]) && !empty($opts["s"])) {
    $infile = $opts["s"];

    if (!is_readable($infile)) {
        echo "Can't read EBNF file '{$infile}'!\n";
        exit(EBNF_READ_ERROR);
    }

    $input = file_get_contents($infile);

    if (false === $input || empty($input)) {
        echo "Can't read content from EBNF file '{$infile}'!\n";
        exit(EBNF_READ_ERROR);
    }
} else {
    echo "Error: Please specify a syntax file!\n\n";
    echo $usage;
    exit(EBNF_NO_SYNTAX);
}

if (isset($opts["f"]) && !empty($opts["f"])) {
    $format = $opts["f"];
}

if (isset($opts["o"]) && !empty($opts["o"])) {
    $outfile = $opts["o"];
} else {
    $outfile = basename($infile);
    $outfile = substr($outfile, 0, strrpos($outfile, ".") + 1);
    $outfile .= $format;
}

try {
    $scanner  = new Scanner($input);
    $parser   = new Parser($scanner);
    $dom      = $parser->parse();
    $renderer = new Renderer($format, $outfile, $dom);
    $renderer->save();
    exit(EBNF_OK);
} catch (SyntaxtException $e) {
    echo "{$e}\n";

    if ($debug) {
        echo "{$e->getTraceAsString()}\n";
    }

    exit(EBNF_SYNTAX_ERROR);
} catch (Exception $e) {
    echo "Error: {$e->getMessage()}\n";

    if ($debug) {
        echo "{$e->getTraceAsString()}\n";
    }

    exit(EBNF_FATAL_ERROR);
}
